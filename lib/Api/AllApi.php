<?php
/**
 * AllApi
 * PHP version 5
 *
 * @category Class
 * @package  EzzeSiftuz\OrdersV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Orders
 *
 * This API documentation describes all endpoints for orders - version 4
 *
 * OpenAPI spec version: v4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace EzzeSiftuz\OrdersV4\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use EzzeSiftuz\OrdersV4\ApiException;
use EzzeSiftuz\OrdersV4\Configuration;
use EzzeSiftuz\OrdersV4\HeaderSelector;
use EzzeSiftuz\OrdersV4\ObjectSerializer;

/**
 * AllApi Class Doc Comment
 *
 * @category Class
 * @package  EzzeSiftuz\OrdersV4
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AllApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelPartnerOrderPositionItems
     *
     * Cancel specific position items of an order
     *
     * @param  string $sales_order_id The salesOrderId of the order (required)
     * @param  string[] $position_item_id The positionItemIds of the order to cancel (required)
     *
     * @throws \EzzeSiftuz\OrdersV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelPartnerOrderPositionItems($sales_order_id, $position_item_id)
    {
        $this->cancelPartnerOrderPositionItemsWithHttpInfo($sales_order_id, $position_item_id);
    }

    /**
     * Operation cancelPartnerOrderPositionItemsWithHttpInfo
     *
     * Cancel specific position items of an order
     *
     * @param  string $sales_order_id The salesOrderId of the order (required)
     * @param  string[] $position_item_id The positionItemIds of the order to cancel (required)
     *
     * @throws \EzzeSiftuz\OrdersV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPartnerOrderPositionItemsWithHttpInfo($sales_order_id, $position_item_id)
    {
        $returnType = '';
        $request = $this->cancelPartnerOrderPositionItemsRequest($sales_order_id, $position_item_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPartnerOrderPositionItemsAsync
     *
     * Cancel specific position items of an order
     *
     * @param  string $sales_order_id The salesOrderId of the order (required)
     * @param  string[] $position_item_id The positionItemIds of the order to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPartnerOrderPositionItemsAsync($sales_order_id, $position_item_id)
    {
        return $this->cancelPartnerOrderPositionItemsAsyncWithHttpInfo($sales_order_id, $position_item_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPartnerOrderPositionItemsAsyncWithHttpInfo
     *
     * Cancel specific position items of an order
     *
     * @param  string $sales_order_id The salesOrderId of the order (required)
     * @param  string[] $position_item_id The positionItemIds of the order to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPartnerOrderPositionItemsAsyncWithHttpInfo($sales_order_id, $position_item_id)
    {
        $returnType = '';
        $request = $this->cancelPartnerOrderPositionItemsRequest($sales_order_id, $position_item_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPartnerOrderPositionItems'
     *
     * @param  string $sales_order_id The salesOrderId of the order (required)
     * @param  string[] $position_item_id The positionItemIds of the order to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelPartnerOrderPositionItemsRequest($sales_order_id, $position_item_id)
    {
        // verify the required parameter 'sales_order_id' is set
        if ($sales_order_id === null || (is_array($sales_order_id) && count($sales_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_id when calling cancelPartnerOrderPositionItems'
            );
        }
        // verify the required parameter 'position_item_id' is set
        if ($position_item_id === null || (is_array($position_item_id) && count($position_item_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $position_item_id when calling cancelPartnerOrderPositionItems'
            );
        }

        $resourcePath = '/v4/orders/{salesOrderId}/positionItems/{positionItemId}/cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sales_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'salesOrderId' . '}',
                ObjectSerializer::toPathValue($sales_order_id),
                $resourcePath
            );
        }
        // path params
        if ($position_item_id !== null) {
            $resourcePath = str_replace(
                '{' . 'positionItemId' . '}',
                ObjectSerializer::toPathValue($position_item_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelPartnerOrders
     *
     * Cancel all position items of an order
     *
     * @param  string[] $sales_order_id The salesOrderIds of the orders to cancel (required)
     *
     * @throws \EzzeSiftuz\OrdersV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelPartnerOrders($sales_order_id)
    {
        $this->cancelPartnerOrdersWithHttpInfo($sales_order_id);
    }

    /**
     * Operation cancelPartnerOrdersWithHttpInfo
     *
     * Cancel all position items of an order
     *
     * @param  string[] $sales_order_id The salesOrderIds of the orders to cancel (required)
     *
     * @throws \EzzeSiftuz\OrdersV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPartnerOrdersWithHttpInfo($sales_order_id)
    {
        $returnType = '';
        $request = $this->cancelPartnerOrdersRequest($sales_order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPartnerOrdersAsync
     *
     * Cancel all position items of an order
     *
     * @param  string[] $sales_order_id The salesOrderIds of the orders to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPartnerOrdersAsync($sales_order_id)
    {
        return $this->cancelPartnerOrdersAsyncWithHttpInfo($sales_order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPartnerOrdersAsyncWithHttpInfo
     *
     * Cancel all position items of an order
     *
     * @param  string[] $sales_order_id The salesOrderIds of the orders to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPartnerOrdersAsyncWithHttpInfo($sales_order_id)
    {
        $returnType = '';
        $request = $this->cancelPartnerOrdersRequest($sales_order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPartnerOrders'
     *
     * @param  string[] $sales_order_id The salesOrderIds of the orders to cancel (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelPartnerOrdersRequest($sales_order_id)
    {
        // verify the required parameter 'sales_order_id' is set
        if ($sales_order_id === null || (is_array($sales_order_id) && count($sales_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_id when calling cancelPartnerOrders'
            );
        }

        $resourcePath = '/v4/orders/{salesOrderId}/cancellation';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sales_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'salesOrderId' . '}',
                ObjectSerializer::toPathValue($sales_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation findPartnerOrders
     *
     * List of orders filtered by fulfillment state
     *
     * @param  string $from_date Defines earliest change date (ISO 8601) the returned orders should have (optional)
     * @param  string $from_order_date Only orders newer than the date specified (ISO 8601) will be returned (optional)
     * @param  string $to_order_date Only orders older than the date specified (ISO 8601) will be returned (optional)
     * @param  string $fulfillment_status &lt;br&gt;ANNOUNCED: Orders with at least one position item in state ANNOUNCED&lt;br&gt;PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED&lt;br&gt;SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE&lt;br&gt;RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT&lt;br&gt;CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER&lt;br&gt;CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE&lt;br&gt;&lt;br&gt;If no state is provided, orders in all possible states are returned.&lt;br&gt;Several values can be passed; it will return a combination of these states without duplicates. Also see parameter &#x27;mode&#x27;.&lt;br&gt;&lt;br&gt;Example: ?fulfillmentStatus&#x3D;PROCESSABLE&amp;fulfillmentStatus&#x3D;CANCELLED_BY_MARKETPLACE (optional)
     * @param  int $limit The maximum amount of orders to return (optional, default to 128)
     * @param  string $order_direction Sort result by &#x27;orderColumnType&#x27; in ASCending or DESCending order (optional, default to ASC)
     * @param  string $order_column_type The column on which to apply &#x27;orderDirection&#x27; parameter (optional, default to ORDER_LIFECYCLE_DATE)
     * @param  string $mode In search mode AT_LEAST_ONE orders with at least one  position item in given &#x27;fulfillmentStatus&#x27; will always be returned (optional, default to BUCKET)
     * @param  string $nextcursor Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is &#x27;limit&#x27;&lt;br&gt;&lt;br&gt;Note: Only the cursor string is required - not the whole link (optional)
     *
     * @throws \EzzeSiftuz\OrdersV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EzzeSiftuz\OrdersV4\Model\PartnerOrderList
     */
    public function findPartnerOrders($from_date = null, $from_order_date = null, $to_order_date = null, $fulfillment_status = null, $limit = '128', $order_direction = 'ASC', $order_column_type = 'ORDER_LIFECYCLE_DATE', $mode = 'BUCKET', $nextcursor = null)
    {
        list($response) = $this->findPartnerOrdersWithHttpInfo($from_date, $from_order_date, $to_order_date, $fulfillment_status, $limit, $order_direction, $order_column_type, $mode, $nextcursor);
        return $response;
    }

    /**
     * Operation findPartnerOrdersWithHttpInfo
     *
     * List of orders filtered by fulfillment state
     *
     * @param  string $from_date Defines earliest change date (ISO 8601) the returned orders should have (optional)
     * @param  string $from_order_date Only orders newer than the date specified (ISO 8601) will be returned (optional)
     * @param  string $to_order_date Only orders older than the date specified (ISO 8601) will be returned (optional)
     * @param  string $fulfillment_status &lt;br&gt;ANNOUNCED: Orders with at least one position item in state ANNOUNCED&lt;br&gt;PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED&lt;br&gt;SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE&lt;br&gt;RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT&lt;br&gt;CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER&lt;br&gt;CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE&lt;br&gt;&lt;br&gt;If no state is provided, orders in all possible states are returned.&lt;br&gt;Several values can be passed; it will return a combination of these states without duplicates. Also see parameter &#x27;mode&#x27;.&lt;br&gt;&lt;br&gt;Example: ?fulfillmentStatus&#x3D;PROCESSABLE&amp;fulfillmentStatus&#x3D;CANCELLED_BY_MARKETPLACE (optional)
     * @param  int $limit The maximum amount of orders to return (optional, default to 128)
     * @param  string $order_direction Sort result by &#x27;orderColumnType&#x27; in ASCending or DESCending order (optional, default to ASC)
     * @param  string $order_column_type The column on which to apply &#x27;orderDirection&#x27; parameter (optional, default to ORDER_LIFECYCLE_DATE)
     * @param  string $mode In search mode AT_LEAST_ONE orders with at least one  position item in given &#x27;fulfillmentStatus&#x27; will always be returned (optional, default to BUCKET)
     * @param  string $nextcursor Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is &#x27;limit&#x27;&lt;br&gt;&lt;br&gt;Note: Only the cursor string is required - not the whole link (optional)
     *
     * @throws \EzzeSiftuz\OrdersV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EzzeSiftuz\OrdersV4\Model\PartnerOrderList, HTTP status code, HTTP response headers (array of strings)
     */
    public function findPartnerOrdersWithHttpInfo($from_date = null, $from_order_date = null, $to_order_date = null, $fulfillment_status = null, $limit = '128', $order_direction = 'ASC', $order_column_type = 'ORDER_LIFECYCLE_DATE', $mode = 'BUCKET', $nextcursor = null)
    {
        $returnType = '\EzzeSiftuz\OrdersV4\Model\PartnerOrderList';
        $request = $this->findPartnerOrdersRequest($from_date, $from_order_date, $to_order_date, $fulfillment_status, $limit, $order_direction, $order_column_type, $mode, $nextcursor);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\OrdersV4\Model\PartnerOrderList',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation findPartnerOrdersAsync
     *
     * List of orders filtered by fulfillment state
     *
     * @param  string $from_date Defines earliest change date (ISO 8601) the returned orders should have (optional)
     * @param  string $from_order_date Only orders newer than the date specified (ISO 8601) will be returned (optional)
     * @param  string $to_order_date Only orders older than the date specified (ISO 8601) will be returned (optional)
     * @param  string $fulfillment_status &lt;br&gt;ANNOUNCED: Orders with at least one position item in state ANNOUNCED&lt;br&gt;PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED&lt;br&gt;SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE&lt;br&gt;RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT&lt;br&gt;CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER&lt;br&gt;CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE&lt;br&gt;&lt;br&gt;If no state is provided, orders in all possible states are returned.&lt;br&gt;Several values can be passed; it will return a combination of these states without duplicates. Also see parameter &#x27;mode&#x27;.&lt;br&gt;&lt;br&gt;Example: ?fulfillmentStatus&#x3D;PROCESSABLE&amp;fulfillmentStatus&#x3D;CANCELLED_BY_MARKETPLACE (optional)
     * @param  int $limit The maximum amount of orders to return (optional, default to 128)
     * @param  string $order_direction Sort result by &#x27;orderColumnType&#x27; in ASCending or DESCending order (optional, default to ASC)
     * @param  string $order_column_type The column on which to apply &#x27;orderDirection&#x27; parameter (optional, default to ORDER_LIFECYCLE_DATE)
     * @param  string $mode In search mode AT_LEAST_ONE orders with at least one  position item in given &#x27;fulfillmentStatus&#x27; will always be returned (optional, default to BUCKET)
     * @param  string $nextcursor Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is &#x27;limit&#x27;&lt;br&gt;&lt;br&gt;Note: Only the cursor string is required - not the whole link (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findPartnerOrdersAsync($from_date = null, $from_order_date = null, $to_order_date = null, $fulfillment_status = null, $limit = '128', $order_direction = 'ASC', $order_column_type = 'ORDER_LIFECYCLE_DATE', $mode = 'BUCKET', $nextcursor = null)
    {
        return $this->findPartnerOrdersAsyncWithHttpInfo($from_date, $from_order_date, $to_order_date, $fulfillment_status, $limit, $order_direction, $order_column_type, $mode, $nextcursor)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation findPartnerOrdersAsyncWithHttpInfo
     *
     * List of orders filtered by fulfillment state
     *
     * @param  string $from_date Defines earliest change date (ISO 8601) the returned orders should have (optional)
     * @param  string $from_order_date Only orders newer than the date specified (ISO 8601) will be returned (optional)
     * @param  string $to_order_date Only orders older than the date specified (ISO 8601) will be returned (optional)
     * @param  string $fulfillment_status &lt;br&gt;ANNOUNCED: Orders with at least one position item in state ANNOUNCED&lt;br&gt;PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED&lt;br&gt;SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE&lt;br&gt;RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT&lt;br&gt;CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER&lt;br&gt;CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE&lt;br&gt;&lt;br&gt;If no state is provided, orders in all possible states are returned.&lt;br&gt;Several values can be passed; it will return a combination of these states without duplicates. Also see parameter &#x27;mode&#x27;.&lt;br&gt;&lt;br&gt;Example: ?fulfillmentStatus&#x3D;PROCESSABLE&amp;fulfillmentStatus&#x3D;CANCELLED_BY_MARKETPLACE (optional)
     * @param  int $limit The maximum amount of orders to return (optional, default to 128)
     * @param  string $order_direction Sort result by &#x27;orderColumnType&#x27; in ASCending or DESCending order (optional, default to ASC)
     * @param  string $order_column_type The column on which to apply &#x27;orderDirection&#x27; parameter (optional, default to ORDER_LIFECYCLE_DATE)
     * @param  string $mode In search mode AT_LEAST_ONE orders with at least one  position item in given &#x27;fulfillmentStatus&#x27; will always be returned (optional, default to BUCKET)
     * @param  string $nextcursor Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is &#x27;limit&#x27;&lt;br&gt;&lt;br&gt;Note: Only the cursor string is required - not the whole link (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function findPartnerOrdersAsyncWithHttpInfo($from_date = null, $from_order_date = null, $to_order_date = null, $fulfillment_status = null, $limit = '128', $order_direction = 'ASC', $order_column_type = 'ORDER_LIFECYCLE_DATE', $mode = 'BUCKET', $nextcursor = null)
    {
        $returnType = '\EzzeSiftuz\OrdersV4\Model\PartnerOrderList';
        $request = $this->findPartnerOrdersRequest($from_date, $from_order_date, $to_order_date, $fulfillment_status, $limit, $order_direction, $order_column_type, $mode, $nextcursor);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'findPartnerOrders'
     *
     * @param  string $from_date Defines earliest change date (ISO 8601) the returned orders should have (optional)
     * @param  string $from_order_date Only orders newer than the date specified (ISO 8601) will be returned (optional)
     * @param  string $to_order_date Only orders older than the date specified (ISO 8601) will be returned (optional)
     * @param  string $fulfillment_status &lt;br&gt;ANNOUNCED: Orders with at least one position item in state ANNOUNCED&lt;br&gt;PROCESSABLE: Orders with at least one position item in state PROCESSABLE and none in ANNOUNCED&lt;br&gt;SENT: Orders with at least one position item in state SENT and none in either ANNOUNCED or PROCESSABLE&lt;br&gt;RETURNED: Orders with at least one position item in state RETURNED and none in either ANNOUNCED, PROCESSABLE, or SENT&lt;br&gt;CANCELLED_BY_PARTNER: Orders with at least one position item in state CANCELLED_BY_PARTNER&lt;br&gt;CANCELLED_BY_MARKETPLACE: Orders with at least one position item in state CANCELLED_BY_MARKETPLACE&lt;br&gt;&lt;br&gt;If no state is provided, orders in all possible states are returned.&lt;br&gt;Several values can be passed; it will return a combination of these states without duplicates. Also see parameter &#x27;mode&#x27;.&lt;br&gt;&lt;br&gt;Example: ?fulfillmentStatus&#x3D;PROCESSABLE&amp;fulfillmentStatus&#x3D;CANCELLED_BY_MARKETPLACE (optional)
     * @param  int $limit The maximum amount of orders to return (optional, default to 128)
     * @param  string $order_direction Sort result by &#x27;orderColumnType&#x27; in ASCending or DESCending order (optional, default to ASC)
     * @param  string $order_column_type The column on which to apply &#x27;orderDirection&#x27; parameter (optional, default to ORDER_LIFECYCLE_DATE)
     * @param  string $mode In search mode AT_LEAST_ONE orders with at least one  position item in given &#x27;fulfillmentStatus&#x27; will always be returned (optional, default to BUCKET)
     * @param  string $nextcursor Cursor for paging requests. If a next cursor is provided, the only other request parameter being considered is &#x27;limit&#x27;&lt;br&gt;&lt;br&gt;Note: Only the cursor string is required - not the whole link (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function findPartnerOrdersRequest($from_date = null, $from_order_date = null, $to_order_date = null, $fulfillment_status = null, $limit = '128', $order_direction = 'ASC', $order_column_type = 'ORDER_LIFECYCLE_DATE', $mode = 'BUCKET', $nextcursor = null)
    {

        $resourcePath = '/v4/orders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from_date !== null) {
            $queryParams['fromDate'] = ObjectSerializer::toQueryValue($from_date, null);
        }
        // query params
        if ($from_order_date !== null) {
            $queryParams['fromOrderDate'] = ObjectSerializer::toQueryValue($from_order_date, null);
        }
        // query params
        if ($to_order_date !== null) {
            $queryParams['toOrderDate'] = ObjectSerializer::toQueryValue($to_order_date, null);
        }
        // query params
        if ($fulfillment_status !== null) {
            $queryParams['fulfillmentStatus'] = ObjectSerializer::toQueryValue($fulfillment_status, null);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit, 'int32');
        }
        // query params
        if ($order_direction !== null) {
            $queryParams['orderDirection'] = ObjectSerializer::toQueryValue($order_direction, null);
        }
        // query params
        if ($order_column_type !== null) {
            $queryParams['orderColumnType'] = ObjectSerializer::toQueryValue($order_column_type, null);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = ObjectSerializer::toQueryValue($mode, null);
        }
        // query params
        if ($nextcursor !== null) {
            $queryParams['nextcursor'] = ObjectSerializer::toQueryValue($nextcursor, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPartnerOrderByOrderNumber
     *
     * Get an order via order number
     *
     * @param  string $order_number order_number (required)
     *
     * @throws \EzzeSiftuz\OrdersV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EzzeSiftuz\OrdersV4\Model\PartnerOrder
     */
    public function getPartnerOrderByOrderNumber($order_number)
    {
        list($response) = $this->getPartnerOrderByOrderNumberWithHttpInfo($order_number);
        return $response;
    }

    /**
     * Operation getPartnerOrderByOrderNumberWithHttpInfo
     *
     * Get an order via order number
     *
     * @param  string $order_number (required)
     *
     * @throws \EzzeSiftuz\OrdersV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EzzeSiftuz\OrdersV4\Model\PartnerOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPartnerOrderByOrderNumberWithHttpInfo($order_number)
    {
        $returnType = '\EzzeSiftuz\OrdersV4\Model\PartnerOrder';
        $request = $this->getPartnerOrderByOrderNumberRequest($order_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\OrdersV4\Model\PartnerOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPartnerOrderByOrderNumberAsync
     *
     * Get an order via order number
     *
     * @param  string $order_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPartnerOrderByOrderNumberAsync($order_number)
    {
        return $this->getPartnerOrderByOrderNumberAsyncWithHttpInfo($order_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPartnerOrderByOrderNumberAsyncWithHttpInfo
     *
     * Get an order via order number
     *
     * @param  string $order_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPartnerOrderByOrderNumberAsyncWithHttpInfo($order_number)
    {
        $returnType = '\EzzeSiftuz\OrdersV4\Model\PartnerOrder';
        $request = $this->getPartnerOrderByOrderNumberRequest($order_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPartnerOrderByOrderNumber'
     *
     * @param  string $order_number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPartnerOrderByOrderNumberRequest($order_number)
    {
        // verify the required parameter 'order_number' is set
        if ($order_number === null || (is_array($order_number) && count($order_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_number when calling getPartnerOrderByOrderNumber'
            );
        }

        $resourcePath = '/v4/orders/{orderNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_number !== null) {
            $resourcePath = str_replace(
                '{' . 'orderNumber' . '}',
                ObjectSerializer::toPathValue($order_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPartnerOrderBySalesOrderId
     *
     * Get an order via sales order id
     *
     * @param  string $sales_order_id sales_order_id (required)
     *
     * @throws \EzzeSiftuz\OrdersV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \EzzeSiftuz\OrdersV4\Model\PartnerOrder
     */
    public function getPartnerOrderBySalesOrderId($sales_order_id)
    {
        list($response) = $this->getPartnerOrderBySalesOrderIdWithHttpInfo($sales_order_id);
        return $response;
    }

    /**
     * Operation getPartnerOrderBySalesOrderIdWithHttpInfo
     *
     * Get an order via sales order id
     *
     * @param  string $sales_order_id (required)
     *
     * @throws \EzzeSiftuz\OrdersV4\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \EzzeSiftuz\OrdersV4\Model\PartnerOrder, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPartnerOrderBySalesOrderIdWithHttpInfo($sales_order_id)
    {
        $returnType = '\EzzeSiftuz\OrdersV4\Model\PartnerOrder';
        $request = $this->getPartnerOrderBySalesOrderIdRequest($sales_order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\EzzeSiftuz\OrdersV4\Model\PartnerOrder',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPartnerOrderBySalesOrderIdAsync
     *
     * Get an order via sales order id
     *
     * @param  string $sales_order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPartnerOrderBySalesOrderIdAsync($sales_order_id)
    {
        return $this->getPartnerOrderBySalesOrderIdAsyncWithHttpInfo($sales_order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPartnerOrderBySalesOrderIdAsyncWithHttpInfo
     *
     * Get an order via sales order id
     *
     * @param  string $sales_order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPartnerOrderBySalesOrderIdAsyncWithHttpInfo($sales_order_id)
    {
        $returnType = '\EzzeSiftuz\OrdersV4\Model\PartnerOrder';
        $request = $this->getPartnerOrderBySalesOrderIdRequest($sales_order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPartnerOrderBySalesOrderId'
     *
     * @param  string $sales_order_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPartnerOrderBySalesOrderIdRequest($sales_order_id)
    {
        // verify the required parameter 'sales_order_id' is set
        if ($sales_order_id === null || (is_array($sales_order_id) && count($sales_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $sales_order_id when calling getPartnerOrderBySalesOrderId'
            );
        }

        $resourcePath = '/v4/orders/{salesOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($sales_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'salesOrderId' . '}',
                ObjectSerializer::toPathValue($sales_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
